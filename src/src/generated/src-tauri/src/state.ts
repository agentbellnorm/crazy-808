/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.6
 * source: src-tauri/src/state.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class State extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        playing?: boolean;
        selected_instrument?: string;
        bar?: number;
        current_variation?: string;
        variation_a?: Variation;
        variation_b?: Variation;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("playing" in data && data.playing != undefined) {
                this.playing = data.playing;
            }
            if ("selected_instrument" in data && data.selected_instrument != undefined) {
                this.selected_instrument = data.selected_instrument;
            }
            if ("bar" in data && data.bar != undefined) {
                this.bar = data.bar;
            }
            if ("current_variation" in data && data.current_variation != undefined) {
                this.current_variation = data.current_variation;
            }
            if ("variation_a" in data && data.variation_a != undefined) {
                this.variation_a = data.variation_a;
            }
            if ("variation_b" in data && data.variation_b != undefined) {
                this.variation_b = data.variation_b;
            }
        }
    }
    get playing() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set playing(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get selected_instrument() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set selected_instrument(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get bar() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set bar(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get current_variation() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set current_variation(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get variation_a() {
        return pb_1.Message.getWrapperField(this, Variation, 6) as Variation;
    }
    set variation_a(value: Variation) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_variation_a() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get variation_b() {
        return pb_1.Message.getWrapperField(this, Variation, 7) as Variation;
    }
    set variation_b(value: Variation) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_variation_b() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        playing?: boolean;
        selected_instrument?: string;
        bar?: number;
        current_variation?: string;
        variation_a?: ReturnType<typeof Variation.prototype.toObject>;
        variation_b?: ReturnType<typeof Variation.prototype.toObject>;
    }): State {
        const message = new State({});
        if (data.playing != null) {
            message.playing = data.playing;
        }
        if (data.selected_instrument != null) {
            message.selected_instrument = data.selected_instrument;
        }
        if (data.bar != null) {
            message.bar = data.bar;
        }
        if (data.current_variation != null) {
            message.current_variation = data.current_variation;
        }
        if (data.variation_a != null) {
            message.variation_a = Variation.fromObject(data.variation_a);
        }
        if (data.variation_b != null) {
            message.variation_b = Variation.fromObject(data.variation_b);
        }
        return message;
    }
    toObject() {
        const data: {
            playing?: boolean;
            selected_instrument?: string;
            bar?: number;
            current_variation?: string;
            variation_a?: ReturnType<typeof Variation.prototype.toObject>;
            variation_b?: ReturnType<typeof Variation.prototype.toObject>;
        } = {};
        if (this.playing != null) {
            data.playing = this.playing;
        }
        if (this.selected_instrument != null) {
            data.selected_instrument = this.selected_instrument;
        }
        if (this.bar != null) {
            data.bar = this.bar;
        }
        if (this.current_variation != null) {
            data.current_variation = this.current_variation;
        }
        if (this.variation_a != null) {
            data.variation_a = this.variation_a.toObject();
        }
        if (this.variation_b != null) {
            data.variation_b = this.variation_b.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.playing != false)
            writer.writeBool(1, this.playing);
        if (this.selected_instrument.length)
            writer.writeString(2, this.selected_instrument);
        if (this.bar != 0)
            writer.writeInt32(4, this.bar);
        if (this.current_variation.length)
            writer.writeString(5, this.current_variation);
        if (this.has_variation_a)
            writer.writeMessage(6, this.variation_a, () => this.variation_a.serialize(writer));
        if (this.has_variation_b)
            writer.writeMessage(7, this.variation_b, () => this.variation_b.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): State {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new State();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.playing = reader.readBool();
                    break;
                case 2:
                    message.selected_instrument = reader.readString();
                    break;
                case 4:
                    message.bar = reader.readInt32();
                    break;
                case 5:
                    message.current_variation = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.variation_a, () => message.variation_a = Variation.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.variation_b, () => message.variation_b = Variation.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): State {
        return State.deserialize(bytes);
    }
}
export class Bar extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bar?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bar" in data && data.bar != undefined) {
                this.bar = data.bar;
            }
        }
    }
    get bar() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
    }
    set bar(value: number[]) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        bar?: number[];
    }): Bar {
        const message = new Bar({});
        if (data.bar != null) {
            message.bar = data.bar;
        }
        return message;
    }
    toObject() {
        const data: {
            bar?: number[];
        } = {};
        if (this.bar != null) {
            data.bar = this.bar;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.bar.length)
            writer.writePackedInt32(8, this.bar);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bar {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bar();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.bar = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Bar {
        return Bar.deserialize(bytes);
    }
}
export class Variation extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        instrument?: Bar[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("instrument" in data && data.instrument != undefined) {
                this.instrument = data.instrument;
            }
        }
    }
    get instrument() {
        return pb_1.Message.getRepeatedWrapperField(this, Bar, 9) as Bar[];
    }
    set instrument(value: Bar[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    static fromObject(data: {
        instrument?: ReturnType<typeof Bar.prototype.toObject>[];
    }): Variation {
        const message = new Variation({});
        if (data.instrument != null) {
            message.instrument = data.instrument.map(item => Bar.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            instrument?: ReturnType<typeof Bar.prototype.toObject>[];
        } = {};
        if (this.instrument != null) {
            data.instrument = this.instrument.map((item: Bar) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.instrument.length)
            writer.writeRepeatedMessage(9, this.instrument, (item: Bar) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Variation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Variation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    reader.readMessage(message.instrument, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Bar.deserialize(reader), Bar));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Variation {
        return Variation.deserialize(bytes);
    }
}
